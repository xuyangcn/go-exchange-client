// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/xuyangcn/go-exchange-client/models"

// PublicClient is an autogenerated mock type for the PublicClient type
type PublicClient struct {
	mock.Mock
}

// Board provides a mock function with given fields: trading, settlement
func (_m *PublicClient) Board(trading string, settlement string) (*models.Board, error) {
	ret := _m.Called(trading, settlement)

	var r0 *models.Board
	if rf, ok := ret.Get(0).(func(string, string) *models.Board); ok {
		r0 = rf(trading, settlement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Board)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(trading, settlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairs provides a mock function with given fields:
func (_m *PublicClient) CurrencyPairs() ([]models.CurrencyPair, error) {
	ret := _m.Called()

	var r0 []models.CurrencyPair
	if rf, ok := ret.Get(0).(func() []models.CurrencyPair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CurrencyPair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FrozenCurrency provides a mock function with given fields:
func (_m *PublicClient) FrozenCurrency() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rate provides a mock function with given fields: trading, settlement
func (_m *PublicClient) Rate(trading string, settlement string) (float64, error) {
	ret := _m.Called(trading, settlement)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(trading, settlement)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(trading, settlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateMap provides a mock function with given fields:
func (_m *PublicClient) RateMap() (map[string]map[string]float64, error) {
	ret := _m.Called()

	var r0 map[string]map[string]float64
	if rf, ok := ret.Get(0).(func() map[string]map[string]float64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Volume provides a mock function with given fields: trading, settlement
func (_m *PublicClient) Volume(trading string, settlement string) (float64, error) {
	ret := _m.Called(trading, settlement)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = rf(trading, settlement)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(trading, settlement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VolumeMap provides a mock function with given fields:
func (_m *PublicClient) VolumeMap() (map[string]map[string]float64, error) {
	ret := _m.Called()

	var r0 map[string]map[string]float64
	if rf, ok := ret.Get(0).(func() map[string]map[string]float64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
